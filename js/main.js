// Generated by CoffeeScript 1.6.2
(function() {
  
/*!
 * jQuery overflow plugin
 * help to know when element was overflowed
 * http://benalman.com/projects/jquery-resize-plugin/
 */

(function($,h,c){var a=$([]),e=$.resize=$.extend($.resize,{}),i,k="setTimeout",j="resize",d=j+"-special-event",b="delay",f="throttleWindow";e[b]=250;e[f]=true;$.event.special[j]={setup:function(){if(!e[f]&&this[k]){return false}var l=$(this);a=a.add(l);$.data(this,d,{w:l.width(),h:l.height()});if(a.length===1){g()}},teardown:function(){if(!e[f]&&this[k]){return false}var l=$(this);a=a.not(l);l.removeData(d);if(!a.length){clearTimeout(i)}},add:function(l){if(!e[f]&&this[k]){return false}var n;function m(s,o,p){var q=$(this),r=$.data(this,d);r.w=o!==c?o:q.width();r.h=p!==c?p:q.height();n.apply(this,arguments)}if($.isFunction(l)){n=l;return m}else{n=l.handler;l.handler=m}}};function g(){i=h[k](function(){a.each(function(){var n=$(this),m=n.width(),l=n.height(),o=$.data(this,d);if(m!==o.w||l!==o.h){n.trigger(j,[o.w=m,o.h=l])}});g()},e[b])}})(jQuery,this);
;
  
/*!
 * Copyright (c) 2013 LegoMushroom Oleg Solomka
 * Dual licensed under the MIT and GPL licenses.
 * https://github.com/jquery/jquery/blob/master/MIT-LICENSE.txt
 */
;  (function() {
    return $.prototype.overflow = function(o) {
      var $el, Core;

      $el = this;
      Core = (function() {
        function Core(o) {
          this.o = o;
          this.overflowed = false;
          this.checkIfOF();
          this.listenToResize();
        }

        Core.prototype.listenToResize = function() {
          var _this = this;

          return $el.resize(function() {
            return _this.checkIfOF();
          });
        };

        Core.prototype.checkIfOF = function() {
          var _ref, _ref1, _ref2, _ref3;

          if (((_ref = this.o) != null ? (_ref1 = _ref.axis) != null ? _ref1.toLowerCase() : void 0 : void 0) === 'y') {
            $el.outerHeight() < $el[0].scrollHeight && this.callOverflow();
            !($el.outerHeight() < $el[0].scrollHeight) && this.callRelease();
          }
          if (((_ref2 = this.o) != null ? (_ref3 = _ref2.axis) != null ? _ref3.toLowerCase() : void 0 : void 0) === 'x') {
            $el.outerWidth() < $el[0].scrollWidth && this.callOverflow();
            !($el.outerWidth() < $el[0].scrollWidth) && this.callRelease();
          }
          if (this.o.axis == null) {
            if (($el.outerHeight() < $el[0].scrollHeight) || ($el.outerWidth() < $el[0].scrollWidth)) {
              return this.callOverflow();
            } else {
              return this.callRelease();
            }
          }
        };

        Core.prototype.callOverflow = function() {
          var _ref;

          !this.overflowed && ((_ref = this.o.overflowCB) != null ? _ref.call($el) : void 0);
          !this.overflowed && $el.trigger('overflow');
          return this.overflowed = true;
        };

        Core.prototype.callRelease = function() {
          var _ref;

          this.overflowed && ((_ref = this.o.releaseCB) != null ? _ref.call($el) : void 0);
          this.overflowed && $el.trigger('flow');
          return this.overflowed = false;
        };

        return Core;

      })();
      return new Core(o);
    };
  })();

}).call(this);
